apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: mongo
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:5.0
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--bind_ip_all"
          ports:
            - containerPort: 27017
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - db.adminCommand('ping')
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongo-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "ebs-storage-class" # Keep your storage class if it's defined
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    app: mongo
spec:
  clusterIP: None # Headless service for StatefulSet
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongo-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: mongo-init-container
          image: mongo:5.0
          command:
            - /bin/sh
            - -c
            - |
              set -o errexit
              echo "Waiting for all MongoDB instances to be ready..."

              # Wait for mongo-0 to be ready by pinging it
              until mongosh --host mongo-0.mongo --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
                echo "Waiting for mongo-0 to be reachable..."
                sleep 5
              done
              echo "mongo-0 is reachable."

              # Wait for mongo-1 to be ready by pinging it
              until mongosh --host mongo-1.mongo --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
                echo "Waiting for mongo-1 to be reachable..."
                sleep 5
              done
              echo "mongo-1 is reachable."

              # Wait for mongo-2 to be ready by pinging it
              until mongosh --host mongo-2.mongo --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
                echo "Waiting for mongo-2 to be reachable..."
                sleep 5
              done
              echo "mongo-2 is reachable."

              echo "All MongoDB instances are reachable. Initializing replica set..."
              mongo --host mongo-0.mongo --eval 'rs.initiate({
                _id: "rs0",
                members: [
                  { _id: 0, host: "mongo-0.mongo:27017" },
                  { _id: 1, host: "mongo-1.mongo:27017" },
                  { _id: 2, host: "mongo-2.mongo:27017" }
                ]
              })'

              echo "Replica set initialized. Adding other members (if not already added by initiate)."
              # These rs.add commands are idempotent, so running them again won't hurt if initiate already added them.
              # They specifically help if the initial initiate somehow missed adding a member.
              mongo --host mongo-0.mongo --eval 'try { rs.add("mongo-1.mongo:27017") } catch (e) { print(e); }'
              mongo --host mongo-0.mongo --eval 'try { rs.add("mongo-2.mongo:27017") } catch (e) { print(e); }'

              echo "Checking replica set status for full readiness..."
              # Wait for all members to be in a healthy state (PRIMARY, SECONDARY)
              until mongo --host mongo-0.mongo --eval "rs.status().members.length == 3 && rs.status().members.every(m => m.stateStr === 'PRIMARY' || m.stateStr === 'SECONDARY')" >/dev/null 2>&1; do
                echo "Replica set not fully ready yet... sleeping"
                sleep 5
              done
              echo "Replica set configuration complete and all members are healthy."