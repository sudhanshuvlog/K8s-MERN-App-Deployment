apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: mongo
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:5.0
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--bind_ip_all"
          ports:
            - containerPort: 27017
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - db.adminCommand('ping')
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongo-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "ebs-storage-class"
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    app: mongo
spec:
  clusterIP: None
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongo-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: mongo-init-container
          image: mongo:5.0
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for all mongo pods to be running and have IPs..."
              REPLICAS=$(kubectl get sts mongo -o jsonpath='{.spec.replicas}')
              READY_COUNT=0
              while [ "$READY_COUNT" -lt "$REPLICAS" ]; do
                READY_COUNT=$(kubectl get po -l app=mongo -o jsonpath='{.items[*].status.phase}' | grep -cw "Running")
                POD_IPS=$(kubectl get po -l app=mongo -o jsonpath='{.items[*].status.podIP}' | tr ' ' '\n' | grep -v '<none>')
                EXPECTED_IPS=$(echo "$POD_IPS" | wc -l)
                if [ "$READY_COUNT" -eq "$REPLICAS" ] && [ "$EXPECTED_IPS" -eq "$REPLICAS" ]; then
                  ALL_READY=true
                else
                  ALL_READY=false
                fi

                echo "Running pods: $READY_COUNT/$REPLICAS, IPs assigned: $EXPECTED_IPS/$REPLICAS"
                if "$ALL_READY"; then
                  break
                fi
                sleep 5
              done
              echo "All mongo pods are running and have IPs."
              sleep 10 # Add a short sleep here to help with DNS propagation if needed
              echo "Initializing replica set"
              mongo --host mongo-0.mongo --eval 'rs.initiate({
                _id: "rs0",
                members: [
                  { _id: 0, host: "mongo-0.mongo:27017" },
                  { _id: 1, host: "mongo-1.mongo:27017" },
                  { _id: 2, host: "mongo-2.mongo:27017" }
                ]
              })'